This program and the accompanying materials are made available under the
terms of the MIT license (X11 license) which accompanies this distribution.

Version 2.0.0 (in development):
  - Added a command line option to scale the graphical user interface by a
    given percentage. The command line option is '--scale n', with 'n'
    the % to scale, e.g., '--scale 110' to increase to 110% or '--scale 75'
    to decrease all sizes to 75%. Native pmChess distributions ship with
    a script to ease calling pmChess with command line arguments. For example,
    on macOS calling .app distributions for command line processing is very
    awkward/user unfriendly, but the new 'pmChess.sh' script can be used
    instead.
  - Switched to latest rules, the "FIDE Laws of Chess taking effect from
    1 January 2023".
  - Added support for en passant captures.
  - Added support for selecting a figure besides a queen when promoting pawns.
  - Added draw rules (claimable and automatic) for repetition and 50/75-move
    rules. The current draw status, i.e., how close to a claimable or automatic
    draw the game is, is summarized in the graphical user interface, which
    provides a "Claim draw"-button to claim draws.
  - Added native distributions for macOS and Windows. The distributions are
    self-contained and do not require a locally installed 'Java SE Platform'.
  - Added mouse support, besides the existing keyboard-based user interface,
    for selecting and moving figures.
  - Added game history with algebraic notation as specified by FIDE. The history
    can be used to undo moves. To reset the game to a previous position, select
    a move using the up- and down-keys and press space. The game will be reset
    to the state resulting after executing the selected move. The tab-key is
    used to switch between chessboard and game history navigation.
  - Removed "Undo move"-entry of the "Game"-menu; the new game history can
    be used instead.
  - Added algebraic notation to the chessboard, marking its files and ranks.
  - Added release notes tab to "About pmChess"-window.
  - Added contact form to "About pmChess"-window which can be used to report
    bugs and give feedback. The form is also directly reachable via a new
    "Contact and feedback"-entry of the "Help"-menu.
  - Added taskbar icon and application logo.
  - The portable jar-file distribution now requires the 'Java SE 19 Platform'.

Version 1.0.0 (10 December 2017):
  - First public release on GitHub as portable jar-file (requires a
    locally installed 'Java SE 9.0.4 Platform').
  - Implements the official chess rules of the "International Chess Federation"
    (FIDE, "Fédération Internationale des Échecs") -- the "Laws of Chess: For
    competitions starting from 1 July 2014 till 30 June 2017" -- except for
    en passant moves and the following draw rules:
      1) Three and five repetition rules: The same position occurs at least
         three times/five times (three times or more: claimable draw; five
         times: automatic draw).
      2) 50- and 75-move rules: The last 50/75 successive moves made by both
         players contain no capture or pawn move (50-move rule: claimable draw;
         75-move rule: automatic draw).
      3) Dead position: Neither player can mate the opponent’s king with any
         series of legal moves.
  - Graphical user interface with chessboard, last move highlighting, status
    message, castling overview and keyboard input for figure selection and
    movement.
  - Menu-bar with support for new game configuration, movement undoing,
    about dialog and shortcuts. Supported are human vs. human or computer
    player games.
  - Computer players are implemented using a common min-max search with
    alpha-beta pruning in combination with a simple scoring-heuristic for
    figure-constellations; the search depth are four half-moves. The following
    implementation constraints are satisfied:
      1) The min-max search is heap memory allocation free. There exist no
         dynamic memory allocations throughout a computer player's turn, for
         which reason computer players have fixed memory requirements. Each
         game situation, including the history of previous and possible moves,
         fits in 32kB.
      2) The min-max implementation is recursive.
